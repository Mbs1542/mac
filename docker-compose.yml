version: '3.8'

networks:
  proxy:
    external: true
  internal:
    external: false

services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    environment:
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /Volumes/WorkDrive/MacStorage/docker/traefik/config/traefik.yml:/traefik.yml:ro
      - /Volumes/WorkDrive/MacStorage/docker/traefik/certificates/acme.json:/acme.json
      - /Volumes/WorkDrive/MacStorage/docker/traefik/config/dynamic.yml:/dynamic.yml:ro
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=http"
      - "traefik.http.routers.traefik.rule=Host(`traefik.mbs-home.ddns.net`)"
      - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
      - "traefik.http.routers.traefik-secure.entrypoints=https"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.mbs-home.ddns.net`)"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-secure.service=api@internal"

  nextcloud:
    image: nextcloud:latest
    container_name: nextcloud
    restart: unless-stopped
    networks:
      - proxy
      - internal
    depends_on:
      - nextcloud-db
      - nextcloud-redis
    environment:
      - POSTGRES_HOST=nextcloud-db
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
      - REDIS_HOST=nextcloud-redis
      - NEXTCLOUD_TRUSTED_DOMAINS=mbs-home.ddns.net nextcloud.mbs-home.ddns.net
      - OVERWRITEPROTOCOL=https
      - OVERWRITEHOST=mbs-home.ddns.net
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/nextcloud/html:/var/www/html
      - /Volumes/WorkDrive/MacStorage/docker/nextcloud/config:/var/www/html/config
      - /Volumes/WorkDrive/MacStorage/docker/nextcloud/data:/var/www/html/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.entrypoints=http"
      - "traefik.http.routers.nextcloud.rule=Host(`mbs-home.ddns.net`) || Host(`nextcloud.mbs-home.ddns.net`)"
      - "traefik.http.middlewares.nextcloud-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.nextcloud.middlewares=nextcloud-https-redirect"
      - "traefik.http.routers.nextcloud-secure.entrypoints=https"
      - "traefik.http.routers.nextcloud-secure.rule=Host(`mbs-home.ddns.net`) || Host(`nextcloud.mbs-home.ddns.net`)"
      - "traefik.http.routers.nextcloud-secure.tls=true"
      - "traefik.http.routers.nextcloud-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.nextcloud-secure.middlewares=nextcloud-headers"
      - "traefik.http.middlewares.nextcloud-headers.headers.stsSeconds=15552000"
      - "traefik.http.middlewares.nextcloud-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.nextcloud-headers.headers.stsPreload=true"

  nextcloud-db:
    image: postgres:15
    container_name: nextcloud-db
    restart: unless-stopped
    networks:
      - internal
    environment:
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/nextcloud/postgres:/var/lib/postgresql/data

  nextcloud-redis:
    image: redis:alpine
    container_name: nextcloud-redis
    restart: unless-stopped
    networks:
      - internal

  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/jellyfin/config:/config
      - /Volumes/WorkDrive/MacStorage/docker/jellyfin/cache:/cache
      - /Volumes/WorkDrive/MacStorage/media:/media
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.entrypoints=http"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.mbs-home.ddns.net`)"
      - "traefik.http.middlewares.jellyfin-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.jellyfin.middlewares=jellyfin-https-redirect"
      - "traefik.http.routers.jellyfin-secure.entrypoints=https"
      - "traefik.http.routers.jellyfin-secure.rule=Host(`jellyfin.mbs-home.ddns.net`)"
      - "traefik.http.routers.jellyfin-secure.tls=true"
      - "traefik.http.routers.jellyfin-secure.tls.certresolver=cloudflare"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"

  authelia:
    image: authelia/authelia:latest
    container_name: authelia
    restart: unless-stopped
    networks:
      - proxy
      - internal
    environment:
      - TZ=${TZ}
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/authelia:/config
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authelia.rule=Host(`auth.mbs-home.ddns.net`)"
      - "traefik.http.routers.authelia.entrypoints=https"
      - "traefik.http.routers.authelia.tls=true"
      - "traefik.http.routers.authelia.tls.certresolver=cloudflare"

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - WEBSOCKET_ENABLED=true
      - SIGNUPS_ALLOWED=false
      - DOMAIN=https://vault.mbs-home.ddns.net
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/vaultwarden:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vaultwarden.rule=Host(`vault.mbs-home.ddns.net`)"
      - "traefik.http.routers.vaultwarden.entrypoints=https"
      - "traefik.http.routers.vaultwarden.tls=true"
      - "traefik.http.routers.vaultwarden.tls.certresolver=cloudflare"

  adguardhome:
    image: adguard/adguardhome:latest
    container_name: adguardhome
    restart: unless-stopped
    networks:
      - proxy
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "853:853/tcp"
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/adguard/work:/opt/adguardhome/work
      - /Volumes/WorkDrive/MacStorage/docker/adguard/conf:/opt/adguardhome/conf
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adguard.rule=Host(`dns.mbs-home.ddns.net`)"
      - "traefik.http.routers.adguard.entrypoints=https"
      - "traefik.http.routers.adguard.tls=true"
      - "traefik.http.routers.adguard.tls.certresolver=cloudflare"
      - "traefik.http.services.adguard.loadbalancer.server.port=80"

  homeassistant:
    image: homeassistant/home-assistant:stable
    container_name: homeassistant
    restart: unless-stopped
    network_mode: host
    privileged: true
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /Volumes/WorkDrive/MacStorage/docker/portainer:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`manage.mbs-home.ddns.net`)"
      - "traefik.http.routers.portainer.entrypoints=https"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.certresolver=cloudflare"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    networks:
      - proxy
      - internal
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/prometheus/config:/etc/prometheus
      - /Volumes/WorkDrive/MacStorage/docker/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    labels:
      - "traefik.enable=false"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    networks:
      - proxy
      - internal
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/grafana/data:/var/lib/grafana
      - /Volumes/WorkDrive/MacStorage/docker/grafana/config:/etc/grafana
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`monitor.mbs-home.ddns.net`)"
      - "traefik.http.routers.grafana.entrypoints=https"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=cloudflare"

  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/sonarr/config:/config
      - /Volumes/WorkDrive/MacStorage/media:/media
      - /Volumes/WorkDrive/MacStorage/downloads:/downloads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.mbs-home.ddns.net`)"
      - "traefik.http.routers.sonarr.entrypoints=https"
      - "traefik.http.routers.sonarr.tls=true"
      - "traefik.http.routers.sonarr.tls.certresolver=cloudflare"

  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/radarr/config:/config
      - /Volumes/WorkDrive/MacStorage/media:/media
      - /Volumes/WorkDrive/MacStorage/downloads:/downloads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.mbs-home.ddns.net`)"
      - "traefik.http.routers.radarr.entrypoints=https"
      - "traefik.http.routers.radarr.tls=true"
      - "traefik.http.routers.radarr.tls.certresolver=cloudflare"

  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=8080
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/qbittorrent/config:/config
      - /Volumes/WorkDrive/MacStorage/downloads:/downloads
    ports:
      - "6881:6881"
      - "6881:6881/udp"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qbittorrent.rule=Host(`torrent.mbs-home.ddns.net`)"
      - "traefik.http.routers.qbittorrent.entrypoints=https"
      - "traefik.http.routers.qbittorrent.tls=true"
      - "traefik.http.routers.qbittorrent.tls.certresolver=cloudflare"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port=8080"

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/homepage/config:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homepage.rule=Host(`dash.mbs-home.ddns.net`)"
      - "traefik.http.routers.homepage.entrypoints=https"
      - "traefik.http.routers.homepage.tls=true"
      - "traefik.http.routers.homepage.tls.certresolver=cloudflare"
      - "traefik.http.services.homepage.loadbalancer.server.port=3000"

  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: filebrowser
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - /Volumes/WorkDrive/MacStorage:/srv
      - /Volumes/WorkDrive/MacStorage/docker/filebrowser:/config
      - /Volumes/WorkDrive/MacStorage/docker/filebrowser/database.db:/database.db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.filebrowser.rule=Host(`files.mbs-home.ddns.net`)"
      - "traefik.http.routers.filebrowser.entrypoints=https"
      - "traefik.http.routers.filebrowser.tls=true"
      - "traefik.http.routers.filebrowser.tls.certresolver=cloudflare"
      - "traefik.http.services.filebrowser.loadbalancer.server.port=80"

  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/bazarr/config:/config
      - /Volumes/WorkDrive/MacStorage/media:/media
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bazarr.rule=Host(`bazarr.mbs-home.ddns.net`)"
      - "traefik.http.routers.bazarr.entrypoints=https"
      - "traefik.http.routers.bazarr.tls=true"
      - "traefik.http.routers.bazarr.tls.certresolver=cloudflare"
      - "traefik.http.services.bazarr.loadbalancer.server.port=6767"

  prowlarr:
    image: linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/prowlarr/config:/config
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.mbs-home.ddns.net`)"
      - "traefik.http.routers.prowlarr.entrypoints=https"
      - "traefik.http.routers.prowlarr.tls=true"
      - "traefik.http.routers.prowlarr.tls.certresolver=cloudflare"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"

  lidarr:
    image: linuxserver/lidarr:latest
    container_name: lidarr
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/lidarr/config:/config
      - /Volumes/WorkDrive/MacStorage/media/music:/music
      - /Volumes/WorkDrive/MacStorage/downloads:/downloads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.mbs-home.ddns.net`)"
      - "traefik.http.routers.lidarr.entrypoints=https"
      - "traefik.http.routers.lidarr.tls=true"
      - "traefik.http.routers.lidarr.tls.certresolver=cloudflare"
      - "traefik.http.services.lidarr.loadbalancer.server.port=8686"

  transmission:
    image: linuxserver/transmission:latest
    container_name: transmission
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/transmission/config:/config
      - /Volumes/WorkDrive/MacStorage/downloads:/downloads
    ports:
      - "9091:9091"
      - "51413:51413"
      - "51413:51413/udp"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.transmission.rule=Host(`transmission.mbs-home.ddns.net`)"
      - "traefik.http.routers.transmission.entrypoints=https"
      - "traefik.http.routers.transmission.tls=true"
      - "traefik.http.routers.transmission.tls.certresolver=cloudflare"
      - "traefik.http.services.transmission.loadbalancer.server.port=9091"

  firefly:
    image: fireflyiii/core:latest
    container_name: firefly
    restart: unless-stopped
    networks:
      - proxy
      - internal
    environment:
      - DB_CONNECTION=pgsql
      - DB_HOST=firefly-db
      - DB_DATABASE=firefly
      - DB_USERNAME=firefly
      - DB_PASSWORD=${FIREFLY_DB_PASSWORD}
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/firefly/export:/var/www/html/storage/export
      - /Volumes/WorkDrive/MacStorage/docker/firefly/upload:/var/www/html/storage/upload
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.firefly.rule=Host(`finance.mbs-home.ddns.net`)"
      - "traefik.http.routers.firefly.entrypoints=https"
      - "traefik.http.routers.firefly.tls=true"
      - "traefik.http.routers.firefly.tls.certresolver=cloudflare"

  firefly-db:
    image: postgres:15
    container_name: firefly-db
    restart: unless-stopped
    networks:
      - internal
    environment:
      - POSTGRES_DB=firefly
      - POSTGRES_USER=firefly
      - POSTGRES_PASSWORD=${FIREFLY_DB_PASSWORD}
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/firefly/db/pgdata:/var/lib/postgresql/data

  wireguard:
    image: linuxserver/wireguard:latest
    container_name: wireguard
    restart: unless-stopped
    networks:
      - proxy
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /Volumes/WorkDrive/MacStorage/docker/wireguard/config:/config
      - /lib/modules:/lib/modules
    ports:
      - "51820:51820/udp"

